#nullable enable
using System;
using Newtonsoft.Json;

namespace Mochineko.ChatGPT_API
{
    /// <summary>
    /// A message between user, assistant and system.
    /// </summary>
    [JsonObject]
    public sealed class Message
    {
        /// <summary>
        /// [Required]
        /// The role of the messages author.
        /// </summary>
        [JsonProperty("role"), JsonRequired]
        public string RoleString
        {
            get => this.Role.ToText();
            set => this.Role = value.ToRole();
        }

        /// <summary>
        /// [Required]
        /// The role of the messages author.
        /// </summary>
        [JsonIgnore]
        public Role Role { get; private set; }

        /// <summary>
        /// [Optional]
        /// The contents of the message.
        /// "content" is required for all messages except assistant messages with function calls.
        /// </summary>
        [JsonProperty("content")]
        public string? Content { get; internal set; }

        /// <summary>
        /// [Optional]
        /// The tool calls generated by the model, such as function calls.
        /// </summary>
        [JsonProperty("tool_calls")]
        public ToolCalling[]? ToolCalls { get; internal set; }

        /// <summary>
        /// [Optional]
        /// Tool call that this message is responding to.
        /// </summary>
        [JsonProperty("tool_call_id")]
        public string? ToolCallId { get; internal set; }

        /// <summary>
        /// [Optional]
        /// The name of the author of this message.
        /// "name" is required if role is "function", and it should be the name of the function whose response is in the "content".
        /// May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.
        /// </summary>
        [JsonProperty("name")]
        [Obsolete("Function calling is deprecated.")]
        public string? Name { get; private set; }

        /// <summary>
        /// [Optional]
        /// The name and arguments of a function that should be called, as generated by the model.
        /// </summary>
        [JsonProperty("function_call")]
        [Obsolete("Function calling is deprecated.")]
        public FunctionCall? FunctionCall { get; private set; }

        internal Message()
        {
            this.Role = Role.Assistant;
            this.Content = string.Empty;
        }

        public Message(
            Role role,
            string? content = null,
            ToolCalling[]? toolCalls = null,
            string? toolCallId = null,
            string? name = null,
            FunctionCall? functionCall = null)
        {
            this.Role = role;
            this.Content = content;
            this.ToolCalls = toolCalls;
            this.ToolCallId = toolCallId;
            this.Name = name;
            this.FunctionCall = functionCall;
        }

        public static Message CreateSystemMessage(string content)
        {
            return new Message(Role.System, content);
        }

        public static Message CreateUserMessage(string content)
        {
            return new Message(Role.User, content);
        }

        public static Message CreateAssistantMessage(
            string content,
            ToolCalling[]? toolCalls = null,
            FunctionCall? functionCall = null)
        {
            return new Message(Role.Assistant, content, toolCalls, null, null, functionCall);
        }

        public static Message CreateToolMessage(string content, string toolCallId)
        {
            return new Message(Role.Tool, content, null, toolCallId);
        }

        [Obsolete("Function calling is deprecated.")]
        public static Message CreateFunctionMessage(string content, string name)
        {
            return new Message(Role.Function, content, null,  null, name);
        }
    }
}